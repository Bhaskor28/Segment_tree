#define mx 100001
int ar[mx];
int res[mx * 3];


//initializing part
void init(int node,int a,int b){

if(a==b){
    res[node]=ar[a];

    return ;
}

// initializing part


int left=node*2;
int right=node*2+1;

int mid=(a+b)/2;
init(left,a,mid);
init(right,mid+1,b);

res[node]=res[left]+res[right];


}

// update part

void update(int node,int b,int e,int i,int nval){

if(i<b || i>e)
    return ;

if(i==b && i==e){

    res[node]=nval;
    return ;
}

int left=2*node;
int right=2*node+1;

int mid=(b+e)/2;
update(left,b,mid,i,nval);

update(right,mid+1,e,i,nval);

res[node]=res[left]+res[right];

}

//query part 

int query(int node,int b,int e,int i,int j){


if(b>j || e<i)
    return 0;

if(b>=i && e<=j){

    return res[node];

}

int left=2*node;
int right=2*node+1;

int mid=(b+e)/2;

int p1=query(left,b,mid,i,j);
int p2=query(right,mid+1,e,i,j);

return p1+p2;


}

void ac0(){

int n;
cin>>n;

arin(ar,1,n+1);

pn(ar,n+1);
init(1,1,n);



pn(res,14);
update(1,1,n,3,10);
pn(res,14);

int q;
cin>>q;

while(q--){
    int x,y;
    cin>>x>>y;
cout<<query(1,1,n,x,y)<<endl;

}

}
